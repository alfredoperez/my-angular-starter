@use 'sass:map';
@use '@angular/material' as mat;
@use './colors' as colors;

// Define light theme
@mixin light-theme() {
  // Apply Material theme with violet palette
  @include mat.theme(
    (
      color: mat.$violet-palette,
      typography: (
        plain-family: 'Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
        brand-family: 'Poppins, Inter, -apple-system, sans-serif',
        bold-weight: 600,
        medium-weight: 500,
        regular-weight: 400,
      ),
      density: 0,
    )
  );

  // Custom CSS variables for our design system
  --color-background: #{map.get(colors.$light-colors, background)};
  --color-foreground: #{map.get(colors.$light-colors, foreground)};
  --color-primary: #{map.get(colors.$light-colors, primary-500)};
  --color-secondary: #{map.get(colors.$light-colors, secondary-500)};
  --color-success: #{map.get(colors.$light-colors, success-500)};
  --color-warning: #{map.get(colors.$light-colors, warning-500)};
  --color-danger: #{map.get(colors.$light-colors, danger-500)};
  --color-content1: #{map.get(colors.$light-colors, content1)};
  --color-content2: #{map.get(colors.$light-colors, content2)};
  --color-content3: #{map.get(colors.$light-colors, content3)};
  --color-content4: #{map.get(colors.$light-colors, content4)};
  --color-focus: #{map.get(colors.$light-colors, focus)};
  --color-overlay: #{map.get(colors.$light-colors, overlay)};

  // Material 3 token overrides for custom colors
  --mat-sys-primary: #{map.get(colors.$light-colors, primary-500)};
  --mat-sys-on-primary: #{map.get(colors.$light-colors, primary-foreground)};
  --mat-sys-primary-container: #{map.get(colors.$light-colors, primary-100)};
  --mat-sys-on-primary-container: #{map.get(colors.$light-colors, primary-900)};

  --mat-sys-secondary: #{map.get(colors.$light-colors, secondary-500)};
  --mat-sys-on-secondary: #{map.get(colors.$light-colors, secondary-foreground)};
  --mat-sys-secondary-container: #{map.get(colors.$light-colors, secondary-100)};
  --mat-sys-on-secondary-container: #{map.get(colors.$light-colors, secondary-900)};

  --mat-sys-error: #{map.get(colors.$light-colors, danger-500)};
  --mat-sys-on-error: #{map.get(colors.$light-colors, danger-foreground)};
  --mat-sys-error-container: #{map.get(colors.$light-colors, danger-100)};
  --mat-sys-on-error-container: #{map.get(colors.$light-colors, danger-900)};

  --mat-sys-surface: #{map.get(colors.$light-colors, background)};
  --mat-sys-on-surface: #{map.get(colors.$light-colors, foreground)};
  --mat-sys-surface-variant: #{map.get(colors.$light-colors, content1)};
  --mat-sys-on-surface-variant: #{map.get(colors.$light-colors, foreground)};

  --mat-sys-background: #{map.get(colors.$light-colors, background)};
  --mat-sys-on-background: #{map.get(colors.$light-colors, foreground)};

  --mat-sys-outline: #{map.get(colors.$light-colors, content3)};
  --mat-sys-outline-variant: #{map.get(colors.$light-colors, content2)};
}

// Define dark theme
@mixin dark-theme() {
  // Apply Material theme with violet palette for dark mode
  @include mat.theme(
    (
      color: mat.$violet-palette,
      typography: (
        plain-family: 'Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
        brand-family: 'Poppins, Inter, -apple-system, sans-serif',
        bold-weight: 600,
        medium-weight: 500,
        regular-weight: 400,
      ),
      density: 0,
    )
  );

  // Custom CSS variables for dark theme
  --color-background: #{map.get(colors.$dark-colors, background)};
  --color-foreground: #{map.get(colors.$dark-colors, foreground)};
  --color-primary: #{map.get(colors.$dark-colors, primary-400)};
  --color-secondary: #{map.get(colors.$dark-colors, secondary-400)};
  --color-success: #{map.get(colors.$dark-colors, success-400)};
  --color-warning: #{map.get(colors.$dark-colors, warning-400)};
  --color-danger: #{map.get(colors.$dark-colors, danger-400)};
  --color-content1: #{map.get(colors.$dark-colors, content1)};
  --color-content2: #{map.get(colors.$dark-colors, content2)};
  --color-content3: #{map.get(colors.$dark-colors, content3)};
  --color-content4: #{map.get(colors.$dark-colors, content4)};
  --color-focus: #{map.get(colors.$dark-colors, focus)};
  --color-overlay: #{map.get(colors.$dark-colors, overlay)};

  // Material 3 token overrides for dark theme
  --mat-sys-primary: #{map.get(colors.$dark-colors, primary-400)};
  --mat-sys-on-primary: #{map.get(colors.$dark-colors, primary-foreground)};
  --mat-sys-primary-container: #{map.get(colors.$dark-colors, primary-200)};
  --mat-sys-on-primary-container: #{map.get(colors.$dark-colors, primary-900)};

  --mat-sys-secondary: #{map.get(colors.$dark-colors, secondary-400)};
  --mat-sys-on-secondary: #{map.get(colors.$dark-colors, secondary-foreground)};
  --mat-sys-secondary-container: #{map.get(colors.$dark-colors, secondary-200)};
  --mat-sys-on-secondary-container: #{map.get(colors.$dark-colors, secondary-900)};

  --mat-sys-error: #{map.get(colors.$dark-colors, danger-400)};
  --mat-sys-on-error: #{map.get(colors.$dark-colors, danger-foreground)};
  --mat-sys-error-container: #{map.get(colors.$dark-colors, danger-200)};
  --mat-sys-on-error-container: #{map.get(colors.$dark-colors, danger-900)};

  --mat-sys-surface: #{map.get(colors.$dark-colors, background)};
  --mat-sys-on-surface: #{map.get(colors.$dark-colors, foreground)};
  --mat-sys-surface-variant: #{map.get(colors.$dark-colors, content1)};
  --mat-sys-on-surface-variant: #{map.get(colors.$dark-colors, foreground)};

  --mat-sys-background: #{map.get(colors.$dark-colors, background)};
  --mat-sys-on-background: #{map.get(colors.$dark-colors, foreground)};

  --mat-sys-outline: #{map.get(colors.$dark-colors, content3)};
  --mat-sys-outline-variant: #{map.get(colors.$dark-colors, content2)};
}